rules_version = '2';
service cloud.firestore {
   match /databases/{database}/documents {
     match /items/{item} {
        function isSignedIn() {
          return request.auth != null;
        }

        function getRole(rsc) {
          return rsc.data.roles[request.auth.uid];
        }

        function isOneOfRoles(rsc, array) {
          return isSignedIn() && (getRole(rsc) in array);
        }

        function isValidNewItem() {
          return request.resource.data.roles[request.auth.uid] == 'owner';
        }

        function onlyContentChanged() {
          // Ensure that title and roles are unchanged and that no new
          // fields are added to the document.
          return request.resource.data.title == resource.data.title
            && request.resource.data.roles == resource.data.roles
            && request.resource.data.keys() == resource.data.keys();
        }

        // Split writing into creation, deletion, and updating. Only an
        // owner can create or delete a item but a writer can update
        // item content.
        allow create: if isValidNewItem();
        allow delete: if isOneOfRoles(resource, ['owner']);
        allow update: if isOneOfRoles(resource, ['owner'])
                      || (isOneOfRoles(resource, ['writer']) && onlyContentChanged());
        allow read: if resource.data.published;
        // allow read: if isOneOfRoles(resource, ['owner', 'writer', 'commenter', 'reader']);

        // match /comments/{comment} {
        //   allow read: if isOneOfRoles(get(/databases/$(database)/documents/stories/$(item)),
        //                               ['owner', 'writer', 'commenter', 'reader']);
        //   allow create: if isOneOfRoles(get(/databases/$(database)/documents/stories/$(item)),
        //                                 ['owner', 'writer', 'commenter'])
        //                 && request.resource.data.user == request.auth.uid;
        // }
     }
   }
}